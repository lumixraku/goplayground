// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package myjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB83d7b77DecodeGoplaygroundMyjson(in *jlexer.Lexer, out *FormDataMQ) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "advformdata":
			(out.AdvFormData).UnmarshalEasyJSON(in)
		case "advform":
			(out.AdvForm).UnmarshalEasyJSON(in)
		case "spamed":
			out.Spamed = int(in.Int())
		case "export":
			out.Export = string(in.String())
		case "log_id":
			out.LogID = string(in.String())
		case "page_id":
			out.PageID = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "custom_sms":
			out.CustomSms = string(in.String())
		case "is_layer":
			out.Layer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77EncodeGoplaygroundMyjson(out *jwriter.Writer, in FormDataMQ) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"advformdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.AdvFormData).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"advform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.AdvForm).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"spamed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Spamed))
	}
	{
		const prefix string = ",\"export\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Export))
	}
	{
		const prefix string = ",\"log_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LogID))
	}
	{
		const prefix string = ",\"page_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PageID))
	}
	{
		const prefix string = ",\"phone_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"custom_sms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomSms))
	}
	{
		const prefix string = ",\"is_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Layer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormDataMQ) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB83d7b77EncodeGoplaygroundMyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormDataMQ) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB83d7b77EncodeGoplaygroundMyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormDataMQ) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB83d7b77DecodeGoplaygroundMyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormDataMQ) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB83d7b77DecodeGoplaygroundMyjson(l, v)
}
func easyjsonB83d7b77DecodeGoplaygroundMyjson1(in *jlexer.Lexer, out *ExportItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "label":
			out.Label = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77EncodeGoplaygroundMyjson1(out *jwriter.Writer, in ExportItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"label\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExportItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB83d7b77EncodeGoplaygroundMyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExportItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB83d7b77EncodeGoplaygroundMyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExportItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB83d7b77DecodeGoplaygroundMyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExportItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB83d7b77DecodeGoplaygroundMyjson1(l, v)
}
func easyjsonB83d7b77DecodeGoplaygroundMyjson2(in *jlexer.Lexer, out *Element) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "radioChkboxVal":
			out.RadioChkboxVal = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "validate":
			out.Validate = string(in.String())
		case "unique":
			out.Unique = string(in.String())
		case "allowEmpty":
			out.AllowEmpty = int(in.Int())
		case "id":
			out.ID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77EncodeGoplaygroundMyjson2(out *jwriter.Writer, in Element) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"radioChkboxVal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RadioChkboxVal))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"label\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"validate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Validate))
	}
	{
		const prefix string = ",\"unique\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Unique))
	}
	{
		const prefix string = ",\"allowEmpty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AllowEmpty))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Element) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB83d7b77EncodeGoplaygroundMyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Element) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB83d7b77EncodeGoplaygroundMyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Element) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB83d7b77DecodeGoplaygroundMyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Element) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB83d7b77DecodeGoplaygroundMyjson2(l, v)
}
func easyjsonB83d7b77DecodeGoplaygroundMyjson3(in *jlexer.Lexer, out *AdvFormData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "form_id":
			out.FormID = int64(in.Int64())
		case "ad_id":
			out.AdID = int64(in.Int64())
		case "site_id":
			out.SiteID = int64(in.Int64())
		case "status":
			out.Status = int(in.Int())
		case "data":
			easyjsonB83d7b77Decode(in, &out.Data)
		case "datamap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.DataMap = make(map[string]string)
				} else {
					out.DataMap = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.DataMap)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "create_time":
			out.CreateTime = string(in.String())
		case "device_id":
			out.DeviceID = int64(in.Int64())
		case "user_id":
			out.UserID = int64(in.Int64())
		case "req_id":
			out.ReqID = string(in.String())
		case "validate_check":
			out.ValidateCheck = int(in.Int())
		case "spam_reason":
			out.SpamReason = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77EncodeGoplaygroundMyjson3(out *jwriter.Writer, in AdvFormData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"form_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.FormID))
	}
	{
		const prefix string = ",\"ad_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AdID))
	}
	{
		const prefix string = ",\"site_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SiteID))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB83d7b77Encode(out, in.Data)
	}
	{
		const prefix string = ",\"datamap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DataMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.DataMap {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"device_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DeviceID))
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"req_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReqID))
	}
	{
		const prefix string = ",\"validate_check\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ValidateCheck))
	}
	{
		const prefix string = ",\"spam_reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SpamReason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvFormData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB83d7b77EncodeGoplaygroundMyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvFormData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB83d7b77EncodeGoplaygroundMyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvFormData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB83d7b77DecodeGoplaygroundMyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvFormData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB83d7b77DecodeGoplaygroundMyjson3(l, v)
}
func easyjsonB83d7b77Decode(in *jlexer.Lexer, out *struct {
	Elements map[string]string `json:"elements"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "elements":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Elements = make(map[string]string)
				} else {
					out.Elements = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Elements)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77Encode(out *jwriter.Writer, in struct {
	Elements map[string]string `json:"elements"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Elements == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Elements {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonB83d7b77DecodeGoplaygroundMyjson4(in *jlexer.Lexer, out *AdvForm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "adv_id":
			out.AdvID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "create_time":
			out.CreateTime = string(in.String())
		case "modify_time":
			out.ModifyTime = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "data":
			easyjsonB83d7b77Decode1(in, &out.Data)
		case "permission":
			out.Permission = string(in.String())
		case "smart_check":
			out.SmartCheck = int(in.Int())
		case "version":
			out.Version = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77EncodeGoplaygroundMyjson4(out *jwriter.Writer, in AdvForm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"adv_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AdvID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"create_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"modify_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ModifyTime))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB83d7b77Encode1(out, in.Data)
	}
	{
		const prefix string = ",\"permission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Permission))
	}
	{
		const prefix string = ",\"smart_check\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SmartCheck))
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvForm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB83d7b77EncodeGoplaygroundMyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvForm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB83d7b77EncodeGoplaygroundMyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvForm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB83d7b77DecodeGoplaygroundMyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvForm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB83d7b77DecodeGoplaygroundMyjson4(l, v)
}
func easyjsonB83d7b77Decode1(in *jlexer.Lexer, out *struct {
	ExtraElements []Element `json:"extraElements"`
	Elements      []Element `json:"elements"`
	Caculator     struct {
		Active bool `json:"active"`
	} `json:"caculator"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "extraElements":
			if in.IsNull() {
				in.Skip()
				out.ExtraElements = nil
			} else {
				in.Delim('[')
				if out.ExtraElements == nil {
					if !in.IsDelim(']') {
						out.ExtraElements = make([]Element, 0, 1)
					} else {
						out.ExtraElements = []Element{}
					}
				} else {
					out.ExtraElements = (out.ExtraElements)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Element
					(v5).UnmarshalEasyJSON(in)
					out.ExtraElements = append(out.ExtraElements, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "elements":
			if in.IsNull() {
				in.Skip()
				out.Elements = nil
			} else {
				in.Delim('[')
				if out.Elements == nil {
					if !in.IsDelim(']') {
						out.Elements = make([]Element, 0, 1)
					} else {
						out.Elements = []Element{}
					}
				} else {
					out.Elements = (out.Elements)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Element
					(v6).UnmarshalEasyJSON(in)
					out.Elements = append(out.Elements, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "caculator":
			easyjsonB83d7b77Decode2(in, &out.Caculator)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77Encode1(out *jwriter.Writer, in struct {
	ExtraElements []Element `json:"extraElements"`
	Elements      []Element `json:"elements"`
	Caculator     struct {
		Active bool `json:"active"`
	} `json:"caculator"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"extraElements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ExtraElements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.ExtraElements {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Elements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Elements {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"caculator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonB83d7b77Encode2(out, in.Caculator)
	}
	out.RawByte('}')
}
func easyjsonB83d7b77Decode2(in *jlexer.Lexer, out *struct {
	Active bool `json:"active"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active":
			out.Active = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB83d7b77Encode2(out *jwriter.Writer, in struct {
	Active bool `json:"active"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	out.RawByte('}')
}
